{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "contracts/CreateEvent.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/**\n * @title CreateEvent\n * @dev Contract for creating and managing events\n */\ncontract CreateEvent is Ownable {\n    uint256 private _eventIds;\n\n    enum EventStatus { Active, Completed, Cancelled }\n\n    struct EventDetails {\n        uint256 eventId;\n        address organizer;\n        string name;\n        string description;\n        uint256 startTime;\n        uint256 endTime;\n        string venueName;\n        string streetAddress;\n        string city;\n        string state;\n        string postalCode;\n        string country;\n        uint256 ticketPrice;\n        uint256 maxAttendees;\n        uint256 ticketsSold;\n        EventStatus status;\n    }\n\n    // Event ID => Event details\n    mapping(uint256 => EventDetails) public events;\n    // Organizer => Event IDs\n    mapping(address => uint256[]) public organizerEvents;\n\n    event EventCreated(\n        uint256 indexed eventId,\n        address indexed organizer,\n        string name,\n        uint256 startTime,\n        uint256 endTime,\n        uint256 ticketPrice,\n        uint256 maxAttendees\n    );\n\n    event EventCancelled(uint256 indexed eventId);\n    event EventCompleted(uint256 indexed eventId);\n\n    constructor() Ownable(msg.sender) {\n        _eventIds = 0;\n    }\n\n    /**\n     * @dev Creates a new event\n     * @param name Event name\n     * @param description Event description\n     * @param startTime Event start time\n     * @param endTime Event end time\n     * @param venueName Venue name\n     * @param streetAddress Street address\n     * @param city City\n     * @param state State\n     * @param postalCode Postal code\n     * @param country Country\n     * @param ticketPrice Price per ticket in wei\n     * @param maxAttendees Maximum number of attendees\n     */\n    function createEvent(\n        string memory name,\n        string memory description,\n        uint256 startTime,\n        uint256 endTime,\n        string memory venueName,\n        string memory streetAddress,\n        string memory city,\n        string memory state,\n        string memory postalCode,\n        string memory country,\n        uint256 ticketPrice,\n        uint256 maxAttendees\n    ) external returns (uint256) {\n        require(bytes(name).length > 0, \"Name cannot be empty\");\n        require(startTime > block.timestamp, \"Start time must be in the future\");\n        require(endTime > startTime, \"End time must be after start time\");\n        require(maxAttendees > 0, \"Max attendees must be greater than 0\");\n        require(bytes(venueName).length > 0, \"Venue name cannot be empty\");\n\n        unchecked {\n            _eventIds++;\n        }\n        uint256 eventId = _eventIds;\n\n        events[eventId] = EventDetails({\n            eventId: eventId,\n            organizer: msg.sender,\n            name: name,\n            description: description,\n            startTime: startTime,\n            endTime: endTime,\n            venueName: venueName,\n            streetAddress: streetAddress,\n            city: city,\n            state: state,\n            postalCode: postalCode,\n            country: country,\n            ticketPrice: ticketPrice,\n            maxAttendees: maxAttendees,\n            ticketsSold: 0,\n            status: EventStatus.Active\n        });\n\n        organizerEvents[msg.sender].push(eventId);\n\n        emit EventCreated(\n            eventId,\n            msg.sender,\n            name,\n            startTime,\n            endTime,\n            ticketPrice,\n            maxAttendees\n        );\n\n        return eventId;\n    }\n\n    /**\n     * @dev Updates ticket sales count for an event\n     * @param eventId Event ID\n     * @param newTicketsSold New number of tickets sold\n     */\n    function updateTicketsSold(uint256 eventId, uint256 newTicketsSold) external {\n        EventDetails storage eventDetails = events[eventId];\n        require(eventDetails.eventId != 0, \"Event does not exist\");\n        require(msg.sender == owner(), \"Only owner can update tickets sold\");\n        require(newTicketsSold <= eventDetails.maxAttendees, \"Cannot exceed max attendees\");\n        \n        eventDetails.ticketsSold = newTicketsSold;\n    }\n\n    /**\n     * @dev Cancels an event\n     * @param eventId Event ID\n     */\n    function cancelEvent(uint256 eventId) external {\n        EventDetails storage eventDetails = events[eventId];\n        require(eventDetails.eventId != 0, \"Event does not exist\");\n        require(msg.sender == eventDetails.organizer || msg.sender == owner(), \"Not authorized\");\n        require(eventDetails.status == EventStatus.Active, \"Event not active\");\n        \n        eventDetails.status = EventStatus.Cancelled;\n        emit EventCancelled(eventId);\n    }\n\n    /**\n     * @dev Completes an event\n     * @param eventId Event ID\n     */\n    function completeEvent(uint256 eventId) external {\n        EventDetails storage eventDetails = events[eventId];\n        require(eventDetails.eventId != 0, \"Event does not exist\");\n        require(msg.sender == eventDetails.organizer || msg.sender == owner(), \"Not authorized\");\n        require(eventDetails.status == EventStatus.Active, \"Event not active\");\n        require(block.timestamp >= eventDetails.endTime, \"Event not ended yet\");\n        \n        eventDetails.status = EventStatus.Completed;\n        emit EventCompleted(eventId);\n    }\n\n    /**\n     * @dev Gets all events created by an organizer\n     * @param organizer Address of the organizer\n     */\n    function getOrganizerEvents(address organizer) external view returns (uint256[] memory) {\n        return organizerEvents[organizer];\n    }\n\n    /**\n     * @dev Gets event details\n     * @param eventId Event ID\n     */\n    function getEventDetails(uint256 eventId) external view returns (EventDetails memory) {\n        require(events[eventId].eventId != 0, \"Event does not exist\");\n        return events[eventId];\n    }\n} "
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "viaIR": true,
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}